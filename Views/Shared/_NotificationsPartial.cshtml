@using Microsoft.IdentityModel.Tokens
@using WebApplication6.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity
@* @inject SignInManager<CustomUser> SignInManager
@inject UserManager<CustomUser> UserManager
@inject IdentityDBContext _context
@using Microsoft.AspNetCore.Identity        
@using Microsoft.IdentityModel.Tokens
@using WebApplication6.Areas.Identity.Data

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-..." crossorigin="anonymous" />

<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
        <i class="fa fa-bell"></i>
        @{
            var currentUser = await UserManager.GetUserAsync(User);
            if (currentUser != null)
            {
                var unreadNotifications = _context.Notifications
                    .Count(n => n.UserID == currentUser.Id && !n.IsSeen);

                <span class="badge badge-light">@unreadNotifications</span>
            }
        }
    </button>
    <ul class="dropdown-menu">
        @if (currentUser != null)
        {
            var notifications = _context.Notifications
            .Where(n => n.UserID == currentUser.Id)
            .OrderByDescending(n => n.CreatedDate)
            .ToList();
            @if (notifications.IsNullOrEmpty())
            {

                <li><a class="dropdown-item" href="#">No notifications available</a></li>
            }
            else
            {
                @foreach (var notification in notifications)
                {
                    <li class="dropdown-item @(notification.IsSeen ? "" : "font-weight-bold")">
                        <a href="#">
                            @notification.NotificationType
                            @* <small class="text-muted">(@notification.CreatedDate?.ToString("yyyy-MM-dd HH:mm"))</small> *@
@* <small class="text-muted">(@notification.CreatedDate?.ToString("g"))</small>
                        </a>
                    </li>
                }
            }
        }
        else
        {
            <li><a class="dropdown-item" href="#">No notifications available</a></li>
        }
    </ul>
</div>  *@

@inject SignInManager<CustomUser> SignInManager
@inject UserManager<CustomUser> UserManager
@inject IdentityDBContext _context

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-..." crossorigin="anonymous"/>

<style>
    .notification-dropdown {
        position: relative;
    }

    .notification-badge {
        position: absolute;
        top: -10px;
        right: -10px;
        background-color: #dc3545;
        color: #fff;
        border-radius: 50%;
        padding: 3px 6px;
        font-size: 12px;
    }

    .notification-dropdown-menu {
        min-width: 300px;
        max-height: 400px;
        overflow-y: auto;
    }

    .notification-item {
        padding: 10px;
        border-bottom: 1px solid #e9ecef;
    }

        .notification-item:last-child {
            border-bottom: none;
        }

        .notification-item.unread {
            background-color: #f8f9fa;
            font-weight: bold;
        }

        .notification-item .notification-timestamp {
            color: #6c757d;
            font-size: 12px;
        }
</style>

<div class="notification-dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
        <i class="fas fa-bell"></i>
        @{
            var currentUser = await UserManager.GetUserAsync(User);
            if (currentUser != null)
            {
                var unreadNotifications = _context.Notifications
                    .Count(n => n.UserID == currentUser.Id && !n.IsSeen);

                <span class="notification-badge">@unreadNotifications</span>
            }
        }
    </button>
    <ul class="dropdown-menu notification-dropdown-menu">
        @if (currentUser != null)
        {
            var notifications = _context.Notifications
                .Where(n => n.UserID == currentUser.Id)
                .OrderByDescending(n => n.CreatedDate)
                .ToList();
            @if (notifications.IsNullOrEmpty())
            {
                <li class="notification-item">No notifications available</li>
            }
            else
            {
                @foreach (var notification in notifications)
                {
                    <li class="notification-item @(notification.IsSeen ? "" : "unread")">
                        <a href="#">
                            @notification.NotificationType
                            <small class="notification-timestamp">(@notification.CreatedDate?.ToString("g"))</small>
                        </a>
                    </li>
                }
            }
        }
        else
        {
            <li class="notification-item">No notifications available</li>
        }
    </ul>
</div>